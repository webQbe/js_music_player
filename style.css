/* Import Font */
@import url('https://fonts.googleapis.com/css?family=Lato&display=swap');


/* Page reset */
* {
    box-sizing: border-box;
}

body{
    height: 100vh;
    margin: 0;
    font-family: 'Lato', sans-serif;

    /* Create a smooth transition between grey & pink  */
    background-image: linear-gradient(0deg, 
    rgb(247, 247, 247) 23.8%, /* grey */
    rgb(252, 221, 221) 92% /* pink */
    );
    /* Syntax Breakdown:

        linear-gradient: Specifies a gradient that changes color along a straight line.

        0deg: Determines the direction of the gradient. 

            0deg: Starts the gradient from the bottom of the element and moves upwards.
            90deg: Moves from the left side to the right.
            180deg: Starts from the top and moves downwards.
            -90deg: Moves from the right side to the left.

        rgb(247, 247, 247): The first color, a very light gray.

        23.8%: Specifies where this color ends in the gradient. The light gray color will dominate the first 23.8% of the gradient's length.

        rgb(252, 221, 221): The second color, a pink.

        92%: Specifies where this color reaches full dominance, starting to blend in earlier. Between 23.8% and 92%, the gradient gradually transitions from light gray to pink.

        Visual Effect:

            The gradient starts at the bottom with a light gray (rgb(247, 247, 247)).

            By 23.8% of the way up, the light gray reaches full opacity and begins transitioning.

            Between 23.8% and 92% of the element's height, the gradient smoothly transitions to pink (rgb(252, 221, 221).

            The pink color dominates fully from 92% to the top of the element. */

    display: flex;
    flex-direction: column; /* Align items vertically */
    align-items: center; /* Center X */
    justify-content: center; /* Center Y */
}

.music-container{
    background-color: #fff;
    border-radius: 15px;
    /* Apply a shadow effect around an element's box */
    box-shadow: 0 20px 20px 0 rgba(252,169,169, 0.6);
    /* Syntax Breakdown:
    
        0: Horizontal offset — moves the shadow horizontally. 
           0px means no horizontal offset.
    
       20px: Vertical offset — moves the shadow vertically. 
             20px places the shadow 20 pixels below the element.

       20px: Blur radius — controls the blur of the shadow. 
             A higher value results in a softer, more spread-out shadow. 

       rgba(252,169,169, 0.6): Shadow color with transparency.
                               0.6 sets the opacity to 60%, making the shadow visible.
       
    */
    
    display: flex; /* X Align child elements  */
    padding: 20px 30px; /* TB & LR */
    position: relative; /* music-info is absolute */
    margin: 100px 0; 
    z-index: 10; /* Send to back */
}


.img-container{
    position: relative; /* Image is absolute */
    width: 110px;
}

/* Styling Image
   Ensure image is circular, cropped, and positioned at the bottom of container. */
.img-container img{

    width: inherit; /* Image's width is inherited from .img-container */
    height: 110px;
    border-radius: 50%; /* Make image circle shaped */

    object-fit: cover; /*  Image fills circle proportionally 
                            without distortion or stretching, cropping if necessary.*/

    position: absolute; /* Position image relative to the .img-container  */ 

    /* Anchor the bottom-left corner of the image to the bottom-left corner of the .img-container. */
    bottom: 0;
    left: 0;

    /* Add image rotating animation */
    animation: rotate 3s linear infinite;

    /* Syntax Breakdown

       animation: rotate 3s linear infinite;
    
       rotate: Refers to the @keyframes rotate block, which defines the rotation behavior.

       3s: The duration of the animation is 3 seconds, meaning one full rotation happens in 3 seconds. 

       linear: The rotation happens at a constant speed throughout the animation cycle.

       infinite: The animation repeats indefinitely.
    
    */

    /* Pause animation by default */
    animation-play-state: paused;

}

/* Add .play class to .music-container with JS to run animation */
.music-container.play .img-container img{

    animation-play-state: running;
    
    /* Syntax Breakdown : animation-play-state: running;

        animation-play-state: This CSS property controls whether an animation is currently running or paused.

            running: Causes the animation to play or resume.
            paused: Halts the animation at its current state.

    */

}


/* Define img rotation  */
@keyframes rotate {
    from {
        transform: rotate(0deg);
    }
 
    to{
        transform: rotate(360deg);
    }

    /* Syntax Breakdown
    
        from (0% progress): The transform property is set to rotate(0deg), meaning the image starts without any rotation.

        to (100% progress): The transform property is set to rotate(360deg), which represents a full clockwise rotation.
    
    */
}

/* Add a small circle to center of image */
.img-container::after{

    content: ''; /* Generate an empty pseudo-element */

    background-color: #fff;
    height: 20px;
    width: 20px;

    position: absolute; /* Place small circle inside container relative to its bounds. */

    left: 50%; /* Position center of small circle at the center of container */
    bottom: 50%;

    border-radius: 50%; /* Make it circle shaped */

    transform: translate(-50%, -50%); /* Push it to middle 
        Adjust small circle's position, so its center aligns exactly with center of container.
        Without this, left: 50%; bottom: 50%; would align the top-left 
        corner of circle at center. 
*/

}

